#!/bin/bash

# Backend Production Setup Script
# This script prepares your backend for production deployment

set -e

echo "🔧 Setting up backend for production deployment..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get backend URL from user
echo -e "${YELLOW}📝 Enter your backend deployment URL:${NC}"
echo "Examples:"
echo "  - EC2: http://YOUR_EC2_IP:5002"
echo "  - Custom domain: https://api.yourdomain.com"
echo "  - Load balancer: https://your-load-balancer.com"
echo ""
read -p "Backend URL: " BACKEND_URL

# Get frontend URL from user
echo -e "${YELLOW}📝 Enter your frontend URL:${NC}"
echo "Examples:"
echo "  - S3: http://asset-management-react-paramesh.s3-website-us-east-1.amazonaws.com"
echo "  - Custom domain: https://yourdomain.com"
echo ""
read -p "Frontend URL: " FRONTEND_URL

# Ensure URLs have protocol
if [[ ! "$BACKEND_URL" =~ ^https?:// ]]; then
    BACKEND_URL="http://$BACKEND_URL"
fi
if [[ ! "$FRONTEND_URL" =~ ^https?:// ]]; then
    FRONTEND_URL="http://$FRONTEND_URL"
fi

echo -e "${GREEN}✅ Using backend URL: $BACKEND_URL${NC}"
echo -e "${GREEN}✅ Using frontend URL: $FRONTEND_URL${NC}"

# Generate secure JWT secret
echo -e "${YELLOW}🔐 Generating secure JWT secret...${NC}"
JWT_SECRET=$(openssl rand -base64 32)

# Create production environment file
echo -e "${YELLOW}📝 Creating production config.env...${NC}"
cat > config.env << EOF
# Production Environment Variables
# Generated by setup-production.sh

# Database
MONGODB_URI=mongodb+srv://parameshk:tjQR02Mq6Lpdi8O3@cluster1.amnjtnt.mongodb.net/asset_management?retryWrites=true&w=majority&appName=Cluster1

# Server
PORT=5002
NODE_ENV=production

# JWT - Generated secure secret
JWT_SECRET=$JWT_SECRET
JWT_EXPIRE=24h

# File Upload
MAX_FILE_SIZE=5242880
UPLOAD_PATH=./uploads

# CORS - Allow frontend
CORS_ORIGIN=$FRONTEND_URL

# Security
BCRYPT_ROUNDS=12
EOF

echo -e "${GREEN}✅ Created config.env with production settings${NC}"

# Test the configuration
echo -e "${YELLOW}🧪 Testing production configuration...${NC}"

# Check if MongoDB connection works
echo -e "${YELLOW}🔍 Testing MongoDB connection...${NC}"
if node -e "
const mongoose = require('mongoose');
mongoose.connect('mongodb+srv://parameshk:tjQR02Mq6Lpdi8O3@cluster1.amnjtnt.mongodb.net/asset_management?retryWrites=true&w=majority&appName=Cluster1')
  .then(() => { console.log('✅ MongoDB connection successful'); process.exit(0); })
  .catch(err => { console.log('❌ MongoDB connection failed:', err.message); process.exit(1); });
" 2>/dev/null; then
    echo -e "${GREEN}✅ MongoDB connection test passed${NC}"
else
    echo -e "${RED}❌ MongoDB connection test failed${NC}"
    echo -e "${YELLOW}📝 Please check your MongoDB connection string${NC}"
fi

# Test production mode
echo -e "${YELLOW}🧪 Testing production mode...${NC}"
if NODE_ENV=production node -e "
console.log('✅ Production mode test passed');
console.log('NODE_ENV:', process.env.NODE_ENV);
process.exit(0);
" 2>/dev/null; then
    echo -e "${GREEN}✅ Production mode test passed${NC}"
else
    echo -e "${RED}❌ Production mode test failed${NC}"
fi

echo -e "${GREEN}🎉 Backend production setup completed!${NC}"
echo ""
echo -e "${YELLOW}📝 Summary:${NC}"
echo "Backend URL: $BACKEND_URL"
echo "Frontend URL: $FRONTEND_URL"
echo "JWT Secret: Generated (secure)"
echo "CORS Origin: $FRONTEND_URL"
echo "Environment: production"
echo ""
echo -e "${YELLOW}📝 Next steps:${NC}"
echo "1. Test locally: NODE_ENV=production node server.js"
echo "2. Deploy to your server: ./deploy.sh"
echo "3. Test API endpoints"
echo ""
echo -e "${YELLOW}📝 Test commands:${NC}"
echo "curl $BACKEND_URL/api"
echo "curl $BACKEND_URL/api/health"
